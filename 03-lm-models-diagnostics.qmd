# Linear regression models: Diagnostics and model-building

```{r}
pacman::p_load(tidyverse, GLMsData, janitor, patchwork)
```

```{r}
data("lungcap")
lung <- lungcap |>
  as_tibble() |>
  clean_names() |>
  mutate(smoke = factor(
    smoke,
    levels = c(0, 1),
    labels = c('Non-smoker',
               'Smoker')))
```

## Residuals for non-normal linear models

```{r}
model <- lung |> lm(fev ~ ht + gender + smoke, data = _)

c('Residuals' = var(resid(model)), 
  'Stadarized residuals' = var(rstandard(model)))
```

```{r}
p1 <- 
  resid(model) |> 
  as_tibble() |> 
  ggplot(aes(value)) +
  geom_histogram(bins = 50)

p2 <- 
  rstandard(model) |> 
  as_tibble() |> 
  ggplot(aes(value)) +
  geom_histogram(bins = 50)

p1 + p2
```

## Leverages for linear regression models

```{r}
hat_values <- hatvalues(model)

# Two largest leverages
sort(hat_values, decreasing = TRUE)[1:2]

# Mean of leverages
mean(hat_values); length(coef(model)) / length(lung$fev)
sort(hat_values, decreasing = TRUE)[1:2] / mean(hat_values)
```

```{r}
sort_h <- sort(hat_values, decreasing = TRUE, index.return = TRUE)
large_h <- sort_h$ix[1:2]
lung[large_h, ]
```

```{r}
lung |> 
  rowid_to_column() |> 
  mutate(color = case_when(
    rowid %in% large_h ~ 1,
    TRUE ~ 0
  )) |> 
  filter(gender == 'M' & smoke == 'Smoker') |> 
  ggplot(aes(ht, fev, color = color)) +
  geom_point() +
  theme(legend.position = 'none') +
  ggtitle('Male smokers')
```

## Residual plots

### Residuals against $x_j$

```{r}
scatter.smooth(rstandard(model) ~ lung$ht, col = 'gray')
```

```{r}
bind_cols(lung, rstandard(model) |> as_tibble()) |> 
  ggplot(aes(ht, value)) +
  geom_point(alpha = .5) +
  geom_smooth(method = 'loess', formula = 'y ~ x')
```

### Partial residual plots

```{r}
partial_resid <- resid(model, type = 'partial') |> as_tibble(); partial_resid
```

```{r}
termplot(model, partial.resid = TRUE, terms = 'ht', las = 1)
```

```{r}
bind_cols(lung, partial_resid |> select(partial_resid = ht)) |> 
  ggplot(aes(ht, partial_resid)) +
  geom_point(alpha = .5) +
  geom_smooth(method = 'loess', formula = 'y ~ x')
```

```{r}
coef(summary(model))

ht_model <- 
  bind_cols(lung, partial_resid |> select(partial_resid = ht)) |> 
  lm(partial_resid ~ ht, data = _)

coef(summary(ht_model))
```

### Plot residuals against $\hat{\mu}$: Constant variance

```{r}
scatter.smooth(rstandard(model) ~ fitted(model), col = 'grey')
```

```{r}
bind_cols(rstandard(model), fitted(model)) |> 
  rename(resid = 1, fitted = 2) |> 
  ggplot(aes(fitted, resid)) +
  geom_point(alpha = .5) +
  geom_smooth(method = 'loess', formula = 'y ~ x')
```

### Q---Q plots and normality

```{r}
qqnorm(rstandard(model))
qqline(rstandard(model))
```

```{r}
resid <- rstandard(model) |> as_tibble()

p1 <- 
  resid |> 
  ggplot(aes(sample = value)) +
  stat_qq() +
  stat_qq_line()

p2 <- 
  resid |> 
  ggplot(aes(value)) +
  geom_histogram(bins = 50)

p1 + p2
```

## Outliers and influential observations

### Studentized residuals

```{r}
summary(cbind(Standarized = rstandard(model), Studentized = rstudent(model)))
```

### Influential observations

```{r}
model <- lung |> lm(fev ~ ht + gender + smoke, data = _)
```

```{r}
# Cook' distance
cooks_max <- which.max(cooks.distance(model))
cooks_min <- which.min(cooks.distance(model))
c(Min = cooks_min, Max = cooks_max)

# DFFITS, CV and Cook's distance
out <- cbind(
  DFFITS = dffits(model),
  Cooks = cooks.distance(model),
  Cov_rat = covratio(model)
)

round(out[c(cooks_min, cooks_max), ], 5)
```

```{r}
model |> broom::tidy()
dfbetas(model)[cooks_min, ]
dfbetas(model)[cooks_max, ]
```

```{r}
influence <- influence.measures(model); names(influence)

head(round(influence$infmat, 3))
head(influence$is.inf)
```

```{r}
colSums(influence$is.inf)

# 7 observations have high leverage
# 56 observations are identified by the coveriance ratio as influential
# Cook's distance does not identify any observation as influential
```

```{r}
table(rowSums(influence$is.inf[, -8]))

# 54 observations are declared as influential on just one criterion
```

#### Influence diagnostics

```{r}
bind_cols(
  cooks.distance(model) |> as_tibble_col('cooks'),
  dffits(model) |> as_tibble_col('dffits'),
  dfbetas(model) |> as_tibble() |> select(3)
) |> 
  rowid_to_column() |> 
  pivot_longer(!rowid) |> 
  ggplot(aes(rowid, value, fill = name)) +
  geom_col() +
  facet_wrap(~ name, scales = 'free_y')
```

## Transforming the response

```{r}
model_sqrt <- lung |> lm(sqrt(fev) ~ ht + gender + smoke, data = _)

bind_cols(
  rstandard(model_sqrt) |> as_tibble_col('standardized'),
  fitted(model_sqrt) |> as_tibble_col('fitted')
) |> 
  ggplot(aes(fitted, standardized)) +
  geom_point()
```

```{r}
model_log <- lung |> lm(log(fev) ~ ht + gender + smoke, data = _)

bind_cols(
  rstandard(model_log) |> as_tibble_col('log'),
  fitted(model_log) |> as_tibble_col('fitted')
) |> 
  ggplot(aes(fitted, log)) +
  geom_point()
```

#### The Box-Cox transformation

```{r}
library(MASS)

boxcox(fev ~ ht + gender + smoke,
       lambda = seq(-.25, .25, length = 11),
       data = lung)
```

## Simple transformations of covariates

```{r}
data('windmill')
windmill <- windmill |> as_tibble() |> clean_names()
```

```{r}
transformations <- 
  windmill |> 
  mutate(wind_log = log(wind),
         wind_inv = 1/wind)

models <- 
  transformations |> 
  map(~ lm(dc ~ .x, data = windmill))
```

```{r}
rstandard <- 
  models |> 
  map_dfc(rstandard) |> 
  rename_with(~ str_c(., '_rstandard'), .cols = contains('wind'))

fitted <- 
  models |> 
  map_dfc(fitted) |> 
  rename_with(~ str_c(., '_fitted'), .cols = contains('wind'))

results <- 
  windmill |> 
    bind_cols(
      rstandard |> select(!dc),
      fitted |> select(!dc),
      transformations |> select(!c(dc, wind))
    )
```

```{r}
p1 <- 
  results |> 
  pivot_longer(!c(dc, contains('rstandard'), contains('fitted'))) |> 
  ggplot(aes(value, dc, color = name)) +
  geom_point() +
  geom_smooth(method = 'loess', formula = 'y ~ x') +
  facet_wrap(~ name, scales = 'free') +
  theme(legend.position = 'none')
```

```{r}
results |> 
  select(!c(dc)) |> 
  pivot_longer(contains('rstandard'), names_to = 'rstandard', values_to = 'r_vals') |> 
  pivot_longer(contains('fitted'), names_to = 'fitted', values_to = 'f_vals') |> 
  pivot_longer(!c(rstandard, r_vals, fitted, f_vals), 
               names_to = 'transformations', values_to = 'vals') |> 
  select(!vals) |> 
  ggplot(aes(f_vals, r_vals, color = transformations)) +
  geom_point() +
  geom_smooth(method = 'loess', formula = 'y ~ x') +
  facet_wrap(~ transformations, scales = 'free') +
  theme(legend.position = 'none')
```

## Polynomial trends

```{r}
data("heatcap")
heat <- heatcap |> as_tibble() |> clean_names()
```

```{r}
heat |> 
  ggplot(aes(temp, cp)) +
  geom_point() +
  ylab('Heat capacity (cal/(mol.K)') +
  xlab('Temp (Kelvin)')
```

#### Raw polynomial

```{r}
model <- heat |> lm(cp ~ temp + I(temp^2), data = _)
summary(model, correlation = TRUE)$correlation
summary(model)
```

```{r}
heat |> 
  bind_cols('pred' = predict(model)) |> 
  pivot_longer(!temp) |> 
  ggplot(aes(temp, value, color = name)) +
  geom_point()
```

#### Orthogonal polynomials

```{r}
model_one <- heat |> lm(cp ~ poly(temp, 1), data = _)
model_two <- heat |> lm(cp ~ poly(temp, 2), data = _)
model_three <- heat |> lm(cp ~ poly(temp, 3), data = _)
model_four <- heat |> lm(cp ~ poly(temp, 4), data = _)
```

```{r}
summary(model_two, correlation = TRUE)$correlation
zapsmall(summary(model_two, correlation = TRUE)$correlation)
```

```{r}
heat |> 
  bind_cols(
    'linear' = predict(model_one),
    'quadratic' = predict(model_two),
    'cubic' = predict(model_three),
    'quartic' = predict(model_four)
  ) |> 
  pivot_longer(
    !c('cp', 'temp')
  ) |> 
  mutate(
    across(name, factor, levels = c('linear', 'quadratic', 'cubic', 'quartic'))
  ) |> 
  ggplot(aes(temp, cp)) +
  geom_point() +
  geom_line(aes(y = value, color = name)) +
  facet_wrap(~ name) +
  theme(
    legend.position = 'bottom'
  )
```

```{r}
model_four |> broom::tidy()
```

#### Diagnostics for the cubic model

```{r}
p1 <- 
  bind_cols(rstandard(model_three), fitted(model_three)) |> 
  rename(resid = 1, fitted = 2) |> 
  ggplot(aes(fitted, resid)) +
  geom_point(alpha = .5) +
  ylab('Standardized residuals') +
  xlab('Fitted values')

p2 <- 
  heat |> 
  bind_cols('resid' = rstandard(model_three)) |> 
  ggplot(aes(temp, resid)) +
  geom_point(alpha = .5) +
  ylab('Standardized residuals') +
  xlab('Temp')

p3 <- 
  rstandard(model_three) |> 
  as_tibble() |> 
  ggplot(aes(sample = value)) +
  stat_qq() +
  stat_qq_line()

p4 <- 
  cooks.distance(model_three) |> 
  as_tibble() |>
  rowid_to_column() |> 
  ggplot(aes(rowid, value)) +
  geom_col()

p1 + p2 / p3 + p4
```

## Regression splines

```{r}
library(splines)
bs(heat$temp, knots=quantile(heat$temp, c(.3, 0.6)), degree=2)
```

```{r}
poly <- heat |> lm(cp ~ poly(temp, 3), data = _)
ns <- heat |> lm(cp ~ ns(temp, df = 3), data = _)
bs <- heat |> lm(cp ~ bs(temp, df = 3), data = _)
```

```{r}
heat |> 
  bind_cols(
    'poly' = predict(poly),
    'ns' = predict(ns),
    'bs' = predict(bs)
  ) |> 
  pivot_longer(!c('cp', 'temp')) |> 
  ggplot() +
  geom_point(aes(temp, cp)) +
  geom_line(aes(temp, value, color = name)) +
  facet_wrap(~ name)
```

```{r}
extractAIC(poly); extractAIC(ns); extractAIC(bs)
```

```{r}
splines <- function(df) {
  heat |> 
  ggplot(aes(temp, cp)) +
  geom_point() +
  geom_smooth(
    method = lm,
    formula = y ~ ns(x, df)
  ) +
  labs(
    title = glue::glue('Knots: {df}')
  )
}

plots <- list()
knots <- c(1, 4, 7)

for (i in knots) {
  print(plots[[i]] <- splines(df = i))
}
```

## Case study 1

```{r}
data(dental)
dental <- dental |> as_tibble() |> clean_names()
```

```{r}
model <- dental |> lm(dmft ~ sugar * indus, data = _)
log_model <- dental |> lm(log(dmft) ~ sugar * indus, data = _)
```

```{r}
diagnose <- 
  function(data, model) {
    indicators <- 
      data |> 
      mutate(
        rstandard = rstandard(model),
        fitted = fitted(model),
        cooks = cooks.distance(model),
        rowid_to_column(data)
      )
    
    p1 <- 
      indicators |> 
      ggplot(aes(fitted, rstandard)) +
      geom_point() +
      geom_smooth(
        formula = 'y ~ x', 
        method = 'loess'
      ) +
      labs(
        x = 'Fitted values', 
        y = 'Standardized residuals'
      )
    
    p2 <- 
      indicators |> 
      ggplot(aes(sample = rstandard)) +
      stat_qq() +
      stat_qq_line() +
      labs(
        x = 'Theoretical quantiles',
        y = 'Sample quantiles'
      )
    
    p3 <- 
      indicators |> 
      ggplot(aes(rowid, cooks)) +
      geom_col() +
      labs(
        x = 'Index',
        y = 'Cook´s distance'
      )
    
    (p1 + p2) / p3 +
      plot_annotation(
        title = 'Model diagnostics',
        subtitle = glue::glue('Data: {
                              str_to_title(deparse(substitute(data)))
                              } | Model: {
                              str_to_title(deparse(substitute(model)))
                              }'),
        theme = theme(
          plot.title = element_text(
            size = 16,
            hjust = 0.5,
            margin = margin(5, 0, 0, 0)
          ),
          plot.subtitle = element_text(
            size = 10,
            hjust = 0.5,
            margin = margin(5, 0, 15, 0)
          )
        )
      )
  }
```

```{r}
diagnose(dental, model)
diagnose(dental, log_model)
```

```{r}
im <- influence.measures(log_model)
colSums(im$is.inf)
```

```{r}
anova(log_model)
summary(log_model)
```

The model can be written as:

$$
\begin{cases}
y \sim N(\mu_i, s^2 = 0.298) \\
\mu_i = 1.38711 - 0.00588x_1 - 1.29160x_2 + 0.02727x_1x_2
\end{cases}
$$

The systematic component can be expanded as:

$$
E[log(y_i)] = \mu_i = 
\begin{cases}
1.38711 - 0.00588x_1 & \text{for industrialized countries} \\
0.09551 + 0.02139x_1 & \text{for non-industrialized countries}
\end{cases}
$$

```{r}
c(
  'AIC (model): ' = extractAIC(model)[2],
  'AIC (log_model): ' = extractAIC(log_model)[2]
)
```

```{r}
dental |> 
  mutate(
    fit = fitted(model)
  ) |> 
  ggplot(aes(sugar, dmft, color = indus)) +
  geom_point() +
  geom_line(aes(y = fit, color = indus))

dental |> 
  mutate(
    fit = fitted(log_model),
    dmft = log(dmft)
  ) |> 
  ggplot(aes(sugar, dmft, color = indus)) +
  geom_point() +
  geom_line(aes(y = fit, color = indus))
```

## Case study 2

```{r}
data(cheese)
cheese <- cheese |> as_tibble() |> clean_names()
```

```{r}
cheese |> 
  mutate(log_h2s = log(h2s)) |> 
  pivot_longer(!taste) |> 
  ggplot(aes(value, taste, color = name)) +
  geom_point() +
  facet_wrap(~name, scales = 'free_x') +
  theme(legend.position = 'none') +
  labs(y = 'Teste score', x = 'Values')
```

#### Interactions

```{r}
full_model <- cheese |> lm(taste ~ acetic * log(h2s) * lactic, data = _)

summary(full_model)
drop1(full_model, test = 'F')
```

```{r}
no_inter_model <- update(full_model, . ~ (acetic + log(h2s) : + lactic)^2)

summary(no_inter_model)
drop1(no_inter_model, test = 'F')
```

```{r}
no_main_model <- cheese |> lm(taste ~ log(h2s) + lactic + acetic, data = _)

summary(no_main_model)
drop1(no_main_model, test = 'F')
```

```{r}
final_model <- cheese |> lm(taste ~ log(h2s) + lactic, data = _)

summary(final_model)
```

```{r}
cheese |> 
  mutate(log_h2s = log(h2s)) |> 
  corrr::correlate()
```

```{r}
diagnose(cheese, final_model)
```

```{r}
cheese |> 
  mutate(
    resid = rstandard(model),
    log_h2s = log(h2s)
  ) |> 
  select(acetic, lactic, log_h2s, resid) |> 
  pivot_longer(!resid) |> 
  ggplot(aes(value, resid, color = name)) +
  geom_point() +
  geom_smooth(method = 'loess', formula = 'y ~ x', se = FALSE) +
  facet_wrap(~ name, scales = 'free_x') +
  theme(legend.position = 'none')
```

```{r}
im <- influence.measures(final_model); colSums(im$is.inf)
```
